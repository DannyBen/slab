doctype html
html(dir="ltr", lang="en")
    head
        meta(charset="utf-8")
        meta(name="viewport" content="width=device-width, initial-scale=1")
        link(rel="stylesheet", href="/static/css/struct.css")
        title The Slab markup language
    body.u-container-vertical
        header
            .u-container
                .u-bar
                    .u-bar__left
                        style.
                          .a-logo { color: black; text-decoration: none; }
                        a.a-logo(href="/")
                            div
                                span.logo Slab
                    .u-bar__right
                        ul
                            li
                                .menu-item
                                    a(href="https://github.com/hypered/slab").menu-link GitHub

        main
            .u-container.u-flow-c-4
                .switcher
                    .flow
                        p Slab is a programmable markup language to generate HTML.

                    .c-content.flow
                        p This project is still very young. Features demonstrated on this page work as shown but they don't always generalize as expected.

                .c-content.flow-all.u-flow-c-4.limit-42em
                    h2 Introduction

                    p Slab is an alternative syntax for writing HTML, plus some programming language features (often found in templating languages, like conditionals and loops). <code>slab</code> is a command-line tool to process <code>.slab</code> files and render them into HTML.

                    p Slab revolves around the concept of fragments. Fragments are pieces of HTML that work like functions. You can define a fragment and then call it:

                    pre
                        code
                            include:escape-html ../examples/docs/frag.slab

                    p The example above defines a fragment named <code>page</code>. It then calls <code>page</code>, passing a block of HTML (containing a heading and a paragraph) as an argument (implicitly called <code>content</code>).

                    p The <code>slab render --pretty</code> command can be used to transform the above code into the following HTML:

                    pre
                        code
                            include:escape-html ../examples/docs/frag.html

                    p When not pretty-printed, it looks like this instead:

                    pre
                        code
                            :escape-html
                                <!DOCTYPE HTML>
                                <body><h1>A title</h1><p>A paragraph.</p></body>

                .c-content.flow-all.u-flow-c-4.limit-42em
                    h2 Basic syntax
                    h3 Elements

                    p At its core, Slab is a short-hand notation to represent HTML. An HTML element is written as its tag name, followed by text content, or by other elements. The tree structure is captured by indenting child elements instead of using closing tags. This syntax is identical to the one used in Pug, which inspired Slab.

                    .switcher
                        pre
                            code
                                include:escape-html ../examples/docs/basic.slab
                        pre
                            code
                                include:escape-html ../examples/docs/basic.html

                    p Note: we show on the resulting HTML pretty-printed. In a production setting, we would instead generate the following:

                    pre
                        code
                            :escape-html
                                <ul><li>Item</li><li>Item</li><li>Item</li></ul>

                    h3 IDs and classes

                    p To assign an ID to an element, the regular attribute notation can be used (see below). Slab also supports tacking the ID directly to the element name with a <code>#</code> character.

                    .switcher
                        pre
                            code
                                include:escape-html ../examples/docs/basic-id.slab
                        pre
                            code
                                include:escape-html ../examples/docs/basic-id.html

                    p Classes work similarly and use and the <code>.</code> character for the short notation instead.

                    .switcher
                        pre
                            code
                                include:escape-html ../examples/docs/basic-class.slab
                        pre
                            code
                                include:escape-html ../examples/docs/basic-class.html

                    p An ID or a class can also be used on their own. In that case, a <code>div</code> element is assumed.

                    .switcher
                        pre
                            code
                                include:escape-html ../examples/docs/basic-div.slab
                        pre
                            code
                                include:escape-html ../examples/docs/basic-div.html

                    h3 Attributes

                    p Attributes (including IDs and classes) can be assigned to element using a syntax similar to HTML itself, by writing them in parenthesis, directly after the element name.

                    .switcher
                        pre
                            code
                                include:escape-html ../examples/docs/basic-attr.slab
                        pre
                            code
                                include:escape-html ../examples/docs/basic-attr.html

                    h3 Comments

                    p Comments are introduced with <code>--</code> or <code>---</code>, either with the comment itself on the same line, or as an indented text block on the floowing lines.

                    .switcher
                        pre
                            code
                                include:escape-html ../examples/docs/basic-comments.slab
                        pre
                            code
                                include:escape-html ../examples/docs/basic-comments.html

                .c-content.flow-all.u-flow-c-4.limit-42em
                    h2 Fragments

                    p Fragments are blocks of HTML that can be named and reused.

                    h3 Basics

                    p To define a new fragment, the <code>frag</code> keyword is used, followed by the name of the fragment. The body of the fragment is made of the following indented lines. To call a fragment, its name is used like a regular element.

                    .switcher
                        pre
                            code
                                include:escape-html ../examples/docs/fragments.slab
                        pre
                            code
                                include:escape-html ../examples/docs/fragments.html

                    p In the above example, the fragment <code>card</code> is defined. In its body, it itself calls another fragment, <code>content</code>. That fragment is passed as an argument when <code>card</code> called. Arguments are given by defining fragments with the corresponding name, indented below the call.

                    h3 Implicit <code>content</code> argument

                    p To make a call to a fragment look more similar to regular HTML elements, indented lines below the call are passed as an argument called <code>content</code> when an expicit fragment with the same name is not defined. I.e. the following example is equivalent to the example above:

                    .switcher
                        pre
                            code
                                include:escape-html ../examples/docs/fragments-short.slab
                        pre
                            code
                                include:escape-html ../examples/docs/fragments-short.html

                    h3 Default arguments

                    p Fragments can define default contents for their arguments (making them optional) by using the <code>default</code> keyword before calling an argument.

                    .switcher
                        pre
                            code
                                include:escape-html ../examples/docs/fragments-default.slab
                        pre
                            code
                                include:escape-html ../examples/docs/fragments-default.html

                    h3 Expression arguments

                    p Fragments can also take (non-fragment) arguments. The expressions that can be used in Slab are documented in the <a href="#expression-language">Expression language</a> section.

                    p A fragment is defined to take (non-fragments) arguments using curly braces directly after its name, mentioning parameters names. Similarly, when calling a fragments, (non-fragments) arguments are passed between curly braces.

                    .switcher
                        pre
                            code
                                include:escape-html ../examples/docs/fragments-arguments.slab
                        pre
                            code
                                include:escape-html ../examples/docs/fragments-arguments.html

                .c-content.flow-all.u-flow-c-4.limit-42em
                    h2#expression-language Expression language

                    p In addition of its lightweight syntax equivalent to HTML, Slab supports some constructs usually found in programming languages.

                    h3 Variable declarations

                    p Variables are declared using the <code>let</code> keyword. A variable (or a more general expression) can be used as the content of an element by following the element name directly with a <code>=</code> character.

                    .switcher
                        pre
                            code
                                include:escape-html ../examples/docs/expr.slab
                        pre
                            code
                                include:escape-html ../examples/docs/expr.html

                    p A current limitation is that each declaration requires its own <code>let</code> line.

                    h3 Expressions

                    p Simple values (integers and string literals) are supported alongside simple expressions (addition, substraction, multiplication and (integer) division).

                    .switcher
                        pre
                            code
                                include:escape-html ../examples/docs/exprs.slab
                        pre
                            code
                                include:escape-html ../examples/docs/exprs.html

                    p Strings can be concatenated with the <code>+</code> operator. Integers can be converted to strings using the <code>show</code> function.

                    .switcher
                        pre
                            code
                                include:escape-html ../examples/docs/exprs-strings.slab
                        pre
                            code
                                include:escape-html ../examples/docs/exprs-strings.html

                    h3 String interpolation

                    p Expressions can be used within the text content of an element using the the <code>##{...}</code> syntax.

                    .switcher
                        pre
                            code
                                include:escape-html ../examples/docs/interpolation.slab
                        pre
                            code
                                include:escape-html ../examples/docs/interpolation.html

                    h3 JSON support

                    p Static JSON files can be loaded by using their relative path.

                    p Assuming a file with the following content:
                    pre
                        code
                            include:escape-html ../data/values.json

                    .switcher
                        pre
                            code
                                include:escape-html ../examples/docs/expr-json.slab
                        pre
                            code
                                include:escape-html ../examples/docs/expr-json.html

                .c-content.flow-all.u-flow-c-4.limit-42em
                    h2 Control flow

                    p Slab supports conditionals and loops using <code>if</code> and <code>for</code> blocks.

                    h3 Conditionals

                    p The <code>else</code> branch is optional.

                    .switcher
                        pre
                            code
                                include:escape-html ../examples/docs/flow-if.slab
                        pre
                            code
                                include:escape-html ../examples/docs/flow-if.html

                    h3 Loops

                    p It is possible to iterate on lists and objects. In the following example, the index and the key are optional.

                    .switcher
                        pre
                            code
                                include:escape-html ../examples/docs/flow-for.slab
                        pre
                            code
                                include:escape-html ../examples/docs/flow-for.html

                .c-content.flow-all.u-flow-c-4.limit-42em
                    h2 Modularity

                    p Slab code can be split in multiple files in two ways: include statements and imports.

                    h3 Includes

                    p An include works by inlining the content of the included file in the including file. When the included file has a <code>.slab</code> extension, it is interpreted as if its code was present in the including file. In particular, any toplevel code that is not <code>let</code> expressions or fragment definitions will render as-if directly written in the including code, and definitions can be used in the including file.

                    p The include syntax allows to specify a filter. Currently the only supported filter is <code>:escape-html</code>. It can be used when you want to show HTML code and also to show Slab code (i.e. disabling its interpretation). This is how the example code on this page is shown.

                    .switcher
                        pre
                            code
                                include:escape-html ../examples/docs/mod-include.slab
                        pre
                            code
                                include:escape-html ../examples/docs/mod-include.html

                    .switcher
                        pre
                            code
                                include:escape-html ../examples/docs/mod-include-filter.slab
                        pre
                            code
                                include:escape-html ../examples/docs/mod-include-filter.html

                    h3 Imports

                    p An import makes it possible to call a Slab file as if it was a fragment. Its body is the content of the file. As with fragments, it is possible to pass fragments as arguments.

                    p Assuming a file called <code>aux-imported.slab</code> with the following content:

                    pre
                        code
                            include:escape-html ../examples/docs/aux-imported.slab

                    p It can be called as a fragment:

                    .switcher
                        pre
                            code
                                include:escape-html ../examples/docs/mod-import.slab
                        pre
                            code
                                include:escape-html ../examples/docs/mod-import.html

                .c-content.flow-all.u-flow-c-4.limit-42em
                    h2 Open source

                    p Slab is an open source project released under the terms of the 2-Clause BSD license. The source code and issue tracker are available on <a href="https://github.com/hypered/slab">GitHub</a>.

                    p The Haskell package is <a href="https://hackage.haskell.org/package/slab">available on Hackage</a>.
