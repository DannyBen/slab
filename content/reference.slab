include layout/page.slab

page
  .u-container.u-flow-c-4
    .c-content.flow-all.u-flow-c-4.limit-42em
      h1#reference Slab reference

    .switcher
      .flow
        p This reference guide provides a comprehensive overview of Slab's features and syntax.

      .c-content.flow
        p Note: Slab is still a young project. The features demonstrated here work as shown, but they may not always generalize as expected.

    .c-content.flow-all.limit-42em

      p Before reading this reference guide, you may want to start with #{a(href="/tutorial.html") the tutorial} first.

      h2#introduction Introduction

      p Slab is an alternative syntax for writing HTML, plus some programming language features (often found in templating languages, such as conditionals and loops). The #{code slab} command-line tool processes #{code .slab} files and renders them into HTML.

      p Slab revolves around the concept of fragments. Fragments are pieces of HTML that act like functions. You can define a fragment and then call it:

      pre
        code
          include:escape-html ../examples/docs/frag.slab

      p The above example defines a fragment named #{code page}. It then calls #{code page}, passing a block of HTML (containing a heading and a paragraph) as an argument (implicitly called #{code content}).

      p The #{code slab render --pretty} command can be used to transform the above code into the following HTML:

      pre
        code
          include:escape-html ../examples/docs/frag.html

      p When it is not pretty-printed, it looks like this instead:

      pre
        code
          :escape-html
            <!DOCTYPE HTML>
            <body><h1>A title</h1><p>A paragraph.</p></body>

    .c-content.flow-all.u-flow-c-4.limit-42em
      h2#basic-syntax Basic syntax
      h3#elements Elements

      p At its core, Slab is a shorthand notation for representing HTML. An HTML element is written as its tag name, followed by text content, or by other elements. The tree structure is captured by indenting child elements instead of using closing tags. This syntax is identical to that used in <a href="https://pugjs.org/">Pug</a>, which inspired Slab.

      .switcher
        pre
          code
            include:escape-html ../examples/docs/basic.slab
        pre
          code
            include:escape-html ../examples/docs/basic.html

      p Note: We show the resulting HTML pretty-printed. In a production environment, we would  generate the following instead:

      pre
        code
          :escape-html
            <ul><li>Item</li><li>Item</li><li>Item</li></ul>

      h3#ids-and-classes IDs and classes

      p To assign an ID to an element, the regular attribute notation can be used (see below). Slab also supports tacking the ID directly to the element name with a ## character.

      .switcher
        pre
          code
            include:escape-html ../examples/docs/basic-id.slab
        pre
          code
            include:escape-html ../examples/docs/basic-id.html

      p Classes work similarly, using the #{code .} character for short notation instead.

      .switcher
        pre
          code
            include:escape-html ../examples/docs/basic-class.slab
        pre
          code
            include:escape-html ../examples/docs/basic-class.html

      p An ID or a class can also be used by itself. In this case, a #{code div} element is assumed.

      .switcher
        pre
          code
            include:escape-html ../examples/docs/basic-div.slab
        pre
          code
            include:escape-html ../examples/docs/basic-div.html

      h3#attributes Attributes

      p Attributes (including IDs and classes) can be assigned to an element using a syntax similar to HTML itself, by placing them in parentheses, directly after the element name. To add multiple attributes, use a comma to separate them.

      .switcher
        pre
          code
            include:escape-html ../examples/docs/basic-attr.slab
        pre
          code
            include:escape-html ../examples/docs/basic-attr.html

      h3#comments Comments

      p Comments are introduced with #{code --} or #{code ---}, either with the comment itself on the same line, or as an indented block of text on subsequent lines.

      .switcher
        pre
          code
            include:escape-html ../examples/docs/basic-comments.slab
        pre
          code
            include:escape-html ../examples/docs/basic-comments.html

    .c-content.flow-all.u-flow-c-4.limit-42em
      h2#fragments Fragments

      p Fragments are blocks of HTML that can be named and reused.

      h3#basics Basics

      p To define a new fragment, the #{code frag} keyword is used, followed by the name of the fragment, and optionally by its formal parameters (in curly braces). The body of the fragment consists of the following indented lines. To call a fragment, its name is used as a regular element and its actual arguments are introduced with the #{code with} keyword.

      .switcher
        pre
          code
            include:escape-html ../examples/docs/fragments.slab
        pre
          code
            include:escape-html ../examples/docs/fragments.html

      p In the example above, the fragment #{code card} is defined. In its body, it itself calls another fragment, #{code para}. This fragment is passed as an argument when #{code card} is called. Arguments are indented below the call.

      h3#implicit-content-argument Implicit #{code content} argument

      p To make a call to a fragment look more like a regular HTML elements, indented lines below the call are passed as an argument called #{code content}. I.e. the following example is equivalent to the example above:

      .switcher
        pre
          code
            include:escape-html ../examples/docs/fragments-short.slab
        pre
          code
            include:escape-html ../examples/docs/fragments-short.html

      h3#default-arguments Default arguments

      p Fragments can define default contents for their arguments (making them optional) by using the #{code default} keyword before calling an argument.

      .switcher
        pre
          code
            include:escape-html ../examples/docs/fragments-default.slab
        pre
          code
            include:escape-html ../examples/docs/fragments-default.html

      h3#expression-arguments Expression arguments

      p Fragments can also take non-fragment arguments. The expressions that can be used in Slab are documented in the <a href="#expression-language">Expression language</a> section.

      p A fragment is defined to take (non-fragment) arguments by using parentheses directly after its name, mentioning parameter names. Similarly, when calling a fragment, (non-fragment) arguments are passed between parentheses.

      .switcher
        pre
          code
            include:escape-html ../examples/docs/fragments-arguments.slab
        pre
          code
            include:escape-html ../examples/docs/fragments-arguments.html

    .c-content.flow-all.u-flow-c-4.limit-42em
      h2#expression-language Expression language

      p In addition to its lightweight syntax equivalent to HTML, Slab supports some constructs commonly found in programming languages.

      h3#variable-declarations Variable declarations

      p Variables are declared with the #{code let} keyword. A variable (or a more general expression) can be used as the content of an element. This is done by immediately following the element name with a #{code =} character.

      .switcher
        pre
          code
            include:escape-html ../examples/docs/expr.slab
        pre
          code
            include:escape-html ../examples/docs/expr.html

      h3#expressions Expressions

      p Simple values (booleans, integers and string literals) are supported, as well as simple operations: addition, subtraction, multiplication, and division for integers, and comparison for all types.

      .switcher
        pre
          code
            include:escape-html ../examples/docs/exprs.slab
        pre
          code
            include:escape-html ../examples/docs/exprs.html

      p Strings can be concatenated using the #{code +} operator. Integers can be converted to strings with the #{code show} function. Strings can be "converted" to booleans using the #{code null} function.

      .switcher
        pre
          code
            include:escape-html ../examples/docs/exprs-strings.slab
        pre
          code
            include:escape-html ../examples/docs/exprs-strings.html

      h3#string-interpolation String interpolation

      p Expressions can be used within the text content of an element using the #{code ##(...)} syntax.

      .switcher
        pre
          code
            include:escape-html ../examples/docs/interpolation.slab
        pre
          code
            include:escape-html ../examples/docs/interpolation.html

      h3#json-support JSON support

      p Static JSON files can be loaded by using their relative path. This makes it easy to store and template data outside of a Slab file.

      p Assume a file with the following JSON content:
      pre
        code
          include:escape-html ../data/values.json

      p Here is an example of how to format the JSON data:

      .switcher
        pre
          code
            include:escape-html ../examples/docs/expr-json.slab
        pre
          code
            include:escape-html ../examples/docs/expr-json.html

    .c-content.flow-all.u-flow-c-4.limit-42em
      h2#control-flow Control flow

      p Slab supports conditionals and loops using #{code if} and #{code for} blocks.

      h3#conditionals Conditionals

      p The #{code else} branch is optional.

      .switcher
        pre
          code
            include:escape-html ../examples/docs/flow-if.slab
        pre
          code
            include:escape-html ../examples/docs/flow-if.html

      h3#loops Loops

      p It is possible to iterate on lists and objects. In the following example, the index and the key are optional.

      .switcher
        pre
          code
            include:escape-html ../examples/docs/flow-for.slab
        pre
          code
            include:escape-html ../examples/docs/flow-for.html

    .c-content.flow-all.u-flow-c-4.limit-42em
      h2#modularity Modularity

      p Slab code can be split into multiple files by using include statements.

      p An include works by inlining the content of the included file in the including file. When the included file has a #{code .slab} extension, it is interpreted as if its code was present in the including file. In particular, any toplevel code that is not #{code let} expressions or fragment definitions will render as-if directly written in the including code, and definitions can be used in the including file.

      p The include syntax allows you to specify a filter. Currently, the only supported filter is #{code :escape-html}. It can be used when you want to show HTML code and also to show Slab code (i.e. disabling its interpretation). This is how the code examples on this page are shown.

      .switcher
        pre
          code
            include:escape-html ../examples/docs/mod-include.slab
        pre
          code
            include:escape-html ../examples/docs/mod-include.html

      .switcher
        pre
          code
            include:escape-html ../examples/docs/mod-include-filter.slab
        pre
          code
            include:escape-html ../examples/docs/mod-include-filter.html
